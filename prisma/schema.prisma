// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npm run migrate --name=add-avatar-field

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  userName          String             @unique
  email             String             @unique // @map("email" varchar(255) COLLATE "C")
  passwordHash      String
  isConfirmed       Boolean
  createdAt         DateTime           @default(now()) //, map: "created_at::timestamptz"
  updatedAt         DateTime           @updatedAt
  emailConfirmation EmailConfirmation?
  profile           Profile?
  Session           Session[]
  posts             Post[]

  @@map("User")
}

model EmailConfirmation {
  userId             Int       @unique
  confirmationCode   String? // является необязательным (nullable)
  codeExpirationDate DateTime? // является необязательным (nullable)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("EmailConfirmation")
}

model Session {
  deviceId   Int     @id @default(autoincrement())
  userId     Int?
  exp        Int?
  ip         String?
  deviceName String?
  iat        Int?
  user       User?   @relation(fields: [userId], references: [id])

  @@map("Session")
}

model PasswordRecovery {
  id             Int      @id @default(autoincrement())
  recoveryCode   String   @unique
  expirationDate DateTime
  email          String   @unique

  @@map("PasswordRecovery")
}

model Profile {
  userId      Int           @unique
  firstName   String?
  lastName    String?
  city        String?
  dateOfBirth DateTime?
  aboutMe     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  avatars     AvatarImage[]
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Profile")
}

enum ImageSizeType {
  THUMBNAIL // 45x45
  SMALL
  MEDIUM // 192x192
  LARGE
  HUGE_HD
}

enum ImageType {
  AVATAR
  POST
}

model AvatarImage {
  id        Int           @id @default(autoincrement())
  profileId Int
  imageType ImageType
  sizeType  ImageSizeType
  url       String        @unique
  width     Int
  height    Int
  fileSize  Int
  fieldId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  profile   Profile?      @relation(fields: [profileId], references: [userId])

  @@map("AvatarImage")
}
model PostImage {
  id        Int           @id @default(autoincrement())
  postId    Int
  status    PostStatus
  imageType ImageType
  sizeType  ImageSizeType
  url       String        @unique
  width     Int
  height    Int
  fileSize  Int
  fieldId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  post      Post?         @relation(fields: [postId], references: [id])

  @@map("PostImage")
}

enum PostStatus {
  PENDING
  UPLOAD
  PUBLISHED
  DELETED
}

model Post {
  id          Int         @id @default(autoincrement())
  ownerId     Int
  description String?
  location    String?
  status      PostStatus  @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  images      PostImage[]
  user        User        @relation(fields: [ownerId], references: [id])

  @@map("Post")
}
