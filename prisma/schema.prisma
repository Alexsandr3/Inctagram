// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npm run migrate --name=add-avatar-field

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  userName          String             @unique
  email             String             @unique // @map("email" varchar(255) COLLATE "C")
  passwordHash      String
  isConfirmed       Boolean
  createdAt         DateTime           @default(now()) //, map: "created_at::timestamptz"
  updatedAt         DateTime           @updatedAt
  emailConfirmation EmailConfirmation?
  profile           Profile?
  Session           Session[]
  avatars           Image[]

  @@map("User")
}

model EmailConfirmation {
  userId             Int       @unique
  confirmationCode   String? // является необязательным (nullable)
  codeExpirationDate DateTime? // является необязательным (nullable)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("EmailConfirmation")
}

model Session {
  deviceId   Int     @id @default(autoincrement())
  userId     Int?
  exp        Int?
  ip         String?
  deviceName String?
  iat        Int?
  user       User?   @relation(fields: [userId], references: [id])

  @@map("Session")
}

model PasswordRecovery {
  id             Int      @id @default(autoincrement())
  recoveryCode   String   @unique
  expirationDate DateTime
  email          String   @unique

  @@map("PasswordRecovery")
}

model Profile {
  userId      Int       @unique
  firstName   String?
  lastName    String?
  city        String?
  dateOfBirth DateTime?
  aboutMe     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  avatars     Image[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Profile")
}

enum ImageSizeType {
  THUMBNAIL // 45x45
  SMALL
  MEDIUM // 192x192
  LARGE
  HUGE_HD
}

enum ImageType {
  AVATAR
  POST
}

model Image {
  id        Int           @id @default(autoincrement())
  userId    Int
  ownerId   Int
  imageType ImageType
  sizeType  ImageSizeType
  url       String        @unique
  width     Int
  height    Int
  fileSize  Int
  fieldId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  profile   Profile?      @relation(fields: [ownerId], references: [userId])
  user      User?         @relation(fields: [userId], references: [id])

  @@map("Image")
}
