// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// npm run migrate --name=add-avatar-field

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

enum UserStatus {
  PENDING
  ACTIVE
  BANNED
  DELETED
}

model User {
  id                 Int                @id @default(autoincrement())
  userName           String             @unique
  email              String             @unique // @map("email" varchar(255) COLLATE "C")
  passwordHash       String
  createdAt          DateTime           @default(now()) //, map: "created_at::timestamptz"
  updatedAt          DateTime           @updatedAt
  emailConfirmation  EmailConfirmation?
  profile            Profile?
  status             UserStatus         @default(PENDING)
  sessions           Session[]
  posts              Post[]
  externalAccounts   ExternalAccount[]
  hasBusinessAccount Boolean            @default(false)

  @@map("Users")
}

model ExternalAccount {
  id                            Int                            @id @default(autoincrement())
  userId                        Int
  provider                      Provider
  providerId                    String                         @unique
  displayName                   String?
  email                         String
  isConfirmed                   Boolean
  createdAt                     DateTime                       @default(now()) //, map: "created_at::timestamptz"
  updatedAt                     DateTime                       @updatedAt
  user                          User                           @relation(fields: [userId], references: [id])
  confirmationOfExternalAccount ConfirmationOfExternalAccount?

  @@map("ExternalAccounts")
}

enum Provider {
  GOOGLE
  GITHUB
}

model EmailConfirmation {
  userId             Int       @unique
  confirmationCode   String?
  codeExpirationDate DateTime?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("EmailConfirmations")
}

model ConfirmationOfExternalAccount {
  providerId         String          @unique
  confirmationCode   String?
  codeExpirationDate DateTime?
  externalAccount    ExternalAccount @relation(fields: [providerId], references: [providerId], onDelete: Cascade)

  @@map("ConfirmationOfExternalAccounts")
}

model Session {
  deviceId   Int     @id @default(autoincrement())
  userId     Int?
  exp        Int?
  ip         String?
  deviceName String?
  iat        Int?
  user       User?   @relation(fields: [userId], references: [id])

  @@map("Sessions")
}

model PasswordRecovery {
  id             Int      @id @default(autoincrement())
  recoveryCode   String   @unique
  expirationDate DateTime
  email          String

  @@map("PasswordRecoverys")
}

enum BanReasonInputType {
  Bad_behavior
  Advertising_placement
  Another_reason
}

model Profile {
  userId      Int                 @unique
  firstName   String?
  lastName    String?
  city        String?
  dateOfBirth DateTime?
  aboutMe     String?
  banReason   BanReasonInputType?
  details     String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  avatars     AvatarImage[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Profiles")
}

enum ImageSizeType {
  THUMBNAIL // 45x45
  SMALL
  MEDIUM // 192x192
  LARGE1_1 // 360x360
  LARGE4_5 // 360x450
  LARGE16_9 // 360x202
  HUGE_HD1_1 // 1440x1440
  HUGE_HD4_5 // 1152x1440
  HUGE_HD16_9 // 1440x810
}

enum ImageType {
  AVATAR
  POST
}

model AvatarImage {
  id        Int           @id @default(autoincrement())
  profileId Int
  imageType ImageType
  sizeType  ImageSizeType
  url       String
  width     Int
  height    Int
  fileSize  Int
  fieldId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  profile   Profile       @relation(fields: [profileId], references: [userId])

  @@map("AvatarImages")
}

enum Status {
  PENDING
  PUBLISHED
  DELETED
}

model PostImage {
  id         Int           @id @default(autoincrement())
  postId     Int?
  ownerId    Int
  resourceId String
  status     Status        @default(PENDING)
  imageType  ImageType
  sizeType   ImageSizeType
  url        String        @unique
  width      Int
  height     Int
  fileSize   Int
  fieldId    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  post       Post?         @relation(fields: [postId], references: [id])

  @@map("PostImages")
}

model Post {
  id          Int         @id @default(autoincrement())
  ownerId     Int
  description String?
  location    String?
  status      Status      @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  images      PostImage[]
  user        User        @relation(fields: [ownerId], references: [id])

  @@map("Posts")
}

model BusinessAccount {
  userId          Int            @unique
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  stipeCustomerId String?
  subscriptions   Subscription[]

  @@map("BusinessAccounts")
}

enum SubscriptionType {
  MONTHLY
  SEMI_ANNUALLY
  YEARLY
}

enum PaymentType {
  PAYPAL
  STRIPE
  CREDIT_CARD
}

enum StatusSubscriptionType {
  PENDING
  ACTIVE
  FINISHED
  DELETED
}

model Subscription {
  id                String                 @id @default(uuid())
  externalSubId     String?
  businessAccountId Int
  customerId        String?
  status            StatusSubscriptionType
  dateOfPayment     DateTime?
  startDate         DateTime?
  endDate           DateTime?
  type              SubscriptionType
  price             Int
  paymentType       PaymentType
  autoRenew         Boolean                @default(true)
  businessAccount   BusinessAccount        @relation(fields: [businessAccountId], references: [userId])
  payments          Payment[]
  renewals          Renewal[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  @@map("Subscriptions")
}

model Renewal {
  id             Int          @id @default(autoincrement())
  dateOfRenewal  DateTime
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("Renewals")
}

enum Currency {
  USD
  EUR
}

enum PaymentStatus {
  PENDING // The payment is pending or in progress.
  SUCCESSFUL // The payment was successfully processed
  CANCELED // The payment was canceled or declined.
  REFUNDED // The payment has been refunded.
  FAILED // The payment failed or encountered an error.
}

model Payment {
  id               Int           @id @default(autoincrement())
  paymentSessionId String
  amount           Float
  currency         Currency
  status           PaymentStatus @default(PENDING)

  context   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("Payments")
}

enum OutBoxEventType {
  PENDING_FOR_BROKER
  SENT_TO_BROKER
  FAILED_SEND_TO_BROKER
}

model OutBoxEvent {
  id            Int             @id @default(autoincrement())
  userId        Int?
  senderService String
  statusEvent   OutBoxEventType @default(PENDING_FOR_BROKER)
  eventName     String
  payload       Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("OutBoxEvents")
}
